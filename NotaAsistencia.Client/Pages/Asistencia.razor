@page "/asistencias"

@using NotaAsistencia.Client.Models
@inject HttpClient Http
@inject IJSRuntime JS
@using System.Net.Http.Json
@using NotaAsistencia.Client.Dtos

<!-- Modal de éxito -->
<div class="modal fade" id="modalExitoAsistencia" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-success">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">✅ Registro Exitoso</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">Las asistencias fueron registradas correctamente.</div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-success" data-bs-dismiss="modal">Aceptar</button>
            </div>
        </div>
    </div>
</div>

<h3 class="text-primary text-center mb-4">Registro de Asistencia </h3>

<div class="card p-4 shadow bg-light">
    <div class="row mb-3">
        <div class="col-md-6">
            <label class="form-label">Seleccione una Materia</label>
            <select class="form-select" @onchange="OnMateriaChanged">
                <option value="">-- Seleccione --</option>
                @foreach (var mat in materiasDisponibles)
                {
                    <option value="@mat.MateriaId">@mat.Nombre</option>
                }
            </select>
        </div>
        <div class="col-md-6">
            <label class="form-label">Fecha de Asistencia</label>
            <InputDate class="form-control" @bind-Value="fechaAsistencia" />
        </div>
    </div>

    @if (nuevasAsistencias.Count == 0)
    {
        <p class="text-muted">No hay estudiantes asignados a esta materia.</p>
    }
    else
    {
        <table class="table table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Estudiante</th>
                    <th>Matrícula</th>
                    <th>Estado</th>
                    <th>Observación</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in nuevasAsistencias)
                {
                    <tr>
                        <td>@item.NombreCompleto</td>
                        <td>@item.Matricula</td>
                        <td>
                            <select class="form-select" @bind="item.Estado">
                                <option value="Presente">Presente</option>
                                <option value="Ausente">Ausente</option>
                                <option value="Excusa">Excusa</option>
                            </select>
                        </td>
                        <td>
                            <InputText class="form-control" @bind-Value="item.Observaciones" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <button class="btn btn-success" @onclick="GuardarAsistencias">Guardar Asistencias</button>
    }
</div>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-info mt-3">@mensaje</div>
}

@code {
    private DateTime fechaAsistencia = DateTime.Today;
    private List<AsistenciaModel> nuevasAsistencias = new();
    private string? mensaje;
    private int? materiaSeleccionadaId;
    private List<MateriaModel> materiasDisponibles = new();

    protected override async Task OnInitializedAsync()
    {
        materiasDisponibles = await Http.GetFromJsonAsync<List<MateriaModel>>("api/Materias/activas");
    }

    private async Task OnMateriaChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int idMateria))
        {
            materiaSeleccionadaId = idMateria;
            var estudiantes = await Http.GetFromJsonAsync<List<EstudianteAsignadoDto>>($"api/Materias/{idMateria}/estudiantes");
            nuevasAsistencias = estudiantes.Select(est => new AsistenciaModel
                {
                    EstudianteId = est.EstudianteId,
                    NombreCompleto = est.NombreCompleto,
                    Matricula = est.Matricula
                }).ToList();
        }
        else
        {
            materiaSeleccionadaId = null;
            nuevasAsistencias.Clear();
        }
    }

    private async Task GuardarAsistencias()
    {
        if (!materiaSeleccionadaId.HasValue) return;

        var registros = nuevasAsistencias.Select(a => new
        {
            a.EstudianteId,
            Fecha = fechaAsistencia,
            a.Estado,
            a.Observaciones,
            MateriaId = materiaSeleccionadaId.Value
        });

        var response = await Http.PostAsJsonAsync("api/Asistencias", registros);
        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("mostrarModal", "modalExitoAsistencia");
        }
        else
        {
            await MostrarMensajeTemporal($"Error: {await response.Content.ReadAsStringAsync()}");
        }
    }

    private async Task MostrarMensajeTemporal(string texto, int segundos = 4)
    {
        mensaje = texto;
        StateHasChanged();
        await Task.Delay(segundos * 1000);
        mensaje = null;
        StateHasChanged();
    }
}
