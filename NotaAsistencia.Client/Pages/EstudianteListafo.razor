@page "/listado-estudiantes"

@using NotaAsistencia.Client.Models
@using NotaAsistencia.Client.Dtos
@inject HttpClient Http
@inject IJSRuntime JS
@using System.Net.Http.Json

<!-- Modal de éxito -->
<div class="modal fade" id="modalExitoEstudiante" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-success">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">✅ Actualización Exitosa</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">El estudiante fue actualizado correctamente.</div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-success" data-bs-dismiss="modal">Aceptar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal de éxito al eliminar -->
<div class="modal fade" id="modalEliminadoEstudiante" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-success">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">✅ Eliminación Exitosa</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">El estudiante fue eliminado correctamente.</div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-success" data-bs-dismiss="modal">Aceptar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal de confirmación -->
<div class="modal fade" id="modalConfirmacionEliminar" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">⚠ Confirmar Eliminación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">¿Estás seguro de que deseas eliminar este estudiante?</div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button class="btn btn-danger" @onclick="ConfirmarEliminar">Eliminar</button>
            </div>
        </div>
    </div>
</div>

<h4 class="text-center mt-3 text-primary">Listado de Estudiantes</h4>

<div class="mb-3">
    <select class="form-select w-25 mb-2" @bind="filtroActivo" disabled="@(filtroMateriaId != null)">
        <option value="activos">Activos</option>
        <option value="inactivos">Inactivos</option>
        <option value="todos">Todos</option>
    </select>


    <select class="form-select w-25" @onchange="FiltrarPorMateria">
        <option value="">-- Filtrar por Materia --</option>
        @foreach (var materia in materiasDisponibles)
        {
            <option value="@materia.MateriaId">@materia.Nombre</option>
        }
    </select>
</div>

@if (estudiantes.Count == 0)
{
    <p>No hay estudiantes registrados.</p>
}
else
{
    <div class="row mb-3">
        <div class="col-md-6">
            <input type="text" class="form-control" placeholder="Buscar por nombre"
                   @bind="filtroNombre" @bind:event="oninput" />
        </div>
        <div class="col-md-6">
            <input type="text" class="form-control" placeholder="Buscar por matrícula"
                   @bind="filtroMatricula" @bind:event="oninput" />
        </div>
    </div>

    <table class="table table-striped table-bordered">
        <thead class="table-dark">
            <tr>
                <th>Nombre</th>
                <th>Matrícula</th>
                <th>Fecha Nacimiento</th>
                <th>Dirección</th>
                <th>Correo</th>
                <th>Teléfono</th>
                <th>Estado</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var est in EstudiantesPaginados)
            {
                <tr class="@(filtroActivo == "todos" && !est.Activo ? "table-secondary text-muted" : "")">
                    <td>@est.NombreCompleto</td>
                    <td>@est.Matricula</td>
                    <td>@est.FechaNacimiento.ToShortDateString()</td>
                    <td>@est.Direccion</td>
                    <td>@est.Correo</td>
                    <td>@est.Telefono</td>
                    <td>@(est.Activo ? "Activo" : "Inactivo")</td>
                    <td>
                        @if (filtroMateriaId == null)
                        {
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => CargarParaEditar(est)">Editar</button>
                        }
                        <button class="btn btn-danger btn-sm" @onclick="() => MostrarConfirmacion(est.EstudianteId)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (TotalPaginas > 1)
    {
        <nav>
            <ul class="pagination justify-content-center">
                <li class="page-item @(paginaActual == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => CambiarPagina(paginaActual - 1)">Anterior</button>
                </li>
                @for (int i = 1; i <= TotalPaginas; i++)
                {
                    <li class="page-item @(paginaActual == i ? "active" : "")">
                        <button class="page-link" @onclick="() => CambiarPagina(i)">@i</button>
                    </li>
                }
                <li class="page-item @(paginaActual == TotalPaginas ? "disabled" : "")">
                    <button class="page-link" @onclick="() => CambiarPagina(paginaActual + 1)">Siguiente</button>
                </li>
            </ul>
        </nav>
    }
}


@code {
    private List<EstudianteModel> estudiantes = new();
    private List<MateriaDtos> materiasDisponibles = new();
    private string filtroActivo = "activos";
    private string filtroNombre = string.Empty;
    private string filtroMatricula = string.Empty;
    private int paginaActual = 1;
    private int tamanioPagina = 5;
    private EstudianteModel? estudianteEditando;
    private int estudianteIdAEliminar;
    private bool modoEdicion = false;
    private string? mensaje;
    private int? filtroMateriaId = null;

    protected override async Task OnInitializedAsync()
    {
        materiasDisponibles = await Http.GetFromJsonAsync<List<MateriaDtos>>("api/Materias/activas");
        await CargarEstudiantes();
    }

    private async Task FiltrarPorMateria(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int id))
        {
            filtroMateriaId = id;
            var asignados = await Http.GetFromJsonAsync<List<EstudianteAsignadoDto>>($"api/Materias/{id}/estudiantes");
            estudiantes = asignados.Select(e => new EstudianteModel
                {
                    EstudianteId = e.EstudianteId,
                    NombreCompleto = e.NombreCompleto,
                    Matricula = e.Matricula,
                    Correo = e.Correo,
                    Telefono = e.Telefono,
                    Activo = true
                }).ToList();
        }
        else
        {
            filtroMateriaId = null;
            await CargarEstudiantes();
        }
    }

    private async Task CargarEstudiantes()
    {
        try
        {
            estudiantes = await Http.GetFromJsonAsync<List<EstudianteModel>>("api/Estudiantes/estado?activo=true");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar estudiantes: {ex.Message}");
        }
    }

    private void CargarParaEditar(EstudianteModel estudiante)
    {
        estudianteEditando = new EstudianteModel
            {
                EstudianteId = estudiante.EstudianteId,
                NombreCompleto = estudiante.NombreCompleto,
                Matricula = estudiante.Matricula,
                FechaNacimiento = estudiante.FechaNacimiento,
                Direccion = estudiante.Direccion,
                Correo = estudiante.Correo,
                Telefono = estudiante.Telefono,
                Activo = estudiante.Activo
            };

        modoEdicion = true;
    }

    private async Task ActualizarEstudiante()
    {
        if (estudianteEditando is null) return;

        try
        {
            var response = await Http.PutAsJsonAsync($"api/Estudiantes/{estudianteEditando.EstudianteId}", estudianteEditando);
            if (response.IsSuccessStatusCode)
            {
                await CargarEstudiantes();
                modoEdicion = false;
                await JS.InvokeVoidAsync("mostrarModal", "modalExitoEstudiante");
            }
            else
            {
                Console.WriteLine($"Error al actualizar: {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error de conexión: {ex.Message}");
        }
    }

    private void MostrarConfirmacion(int id)
    {
        estudianteIdAEliminar = id;
        JS.InvokeVoidAsync("mostrarModal", "modalConfirmacionEliminar");
    }

    private async Task ConfirmarEliminar()
    {
        try
        {
            var response = await Http.DeleteAsync($"api/Estudiantes/{estudianteIdAEliminar}");
            if (response.IsSuccessStatusCode)
            {
                await CargarEstudiantes();
                await JS.InvokeVoidAsync("cerrarModal", "modalConfirmacionEliminar");
                await JS.InvokeVoidAsync("mostrarModal", "modalEliminadoEstudiante");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error eliminando estudiante: {ex.Message}");
        }
    }

    private IEnumerable<EstudianteModel> EstudiantesPaginados =>
        estudiantes
        .Where(e => e.NombreCompleto.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase) &&
                    e.Matricula.Contains(filtroMatricula, StringComparison.OrdinalIgnoreCase))
        .Skip((paginaActual - 1) * tamanioPagina)
        .Take(tamanioPagina);

    private int TotalPaginas =>
        (int)Math.Ceiling((double)estudiantes
            .Where(e => e.NombreCompleto.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase) &&
                        e.Matricula.Contains(filtroMatricula, StringComparison.OrdinalIgnoreCase)).Count() / tamanioPagina);

    private void CambiarPagina(int nuevaPagina)
    {
        if (nuevaPagina >= 1 && nuevaPagina <= TotalPaginas)
        {
            paginaActual = nuevaPagina;
        }
    }
}
