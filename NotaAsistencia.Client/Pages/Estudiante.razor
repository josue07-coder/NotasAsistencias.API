@using NotaAsistencia.Client.Models
@inject HttpClient Http
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json

@page "/estudiantes"

<h3 class="text-primary mb-4">Registrar Estudiante</h3>

<EditForm Model="nuevoEstudiante" OnValidSubmit="Registrar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-3">
        <div class="col-md-6">
            <label class="form-label">Nombre Completo</label>
            <InputText @bind-Value="nuevoEstudiante.NombreCompleto" class="form-control" placeholder="Ingrese nombre completo" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Matrícula</label>
            <InputText @bind-Value="nuevoEstudiante.Matricula" class="form-control" placeholder="Ej: A2023123" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label class="form-label">Fecha de Nacimiento</label>
            <InputDate @bind-Value="nuevoEstudiante.FechaNacimiento" class="form-control" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Teléfono</label>
            <InputText @bind-Value="nuevoEstudiante.Telefono" class="form-control" placeholder="8091234567" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label class="form-label">Correo</label>
            <InputText @bind-Value="nuevoEstudiante.Correo" class="form-control" placeholder="correo@ejemplo.com" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Dirección</label>
            <InputText @bind-Value="nuevoEstudiante.Direccion" class="form-control" placeholder="Dirección actual" />
        </div>
    </div>

    <div class="mb-3 form-check">
        <InputCheckbox class="form-check-input" @bind-Value="nuevoEstudiante.Activo" />
        <label class="form-check-label">¿Activo?</label>
    </div>

    <div class="mt-2">
        <button class="btn btn-success btn-sm" type="submit">Guardar</button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-info mt-2">@mensaje</div>
}

@code {
    private EstudianteModel nuevoEstudiante = new();
    private string? mensaje;

    private async Task Registrar()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Estudiantes", nuevoEstudiante);
            if (response.IsSuccessStatusCode)
            {
                await MostrarMensaje("Estudiante registrado correctamente.");
                nuevoEstudiante = new();
            }
            else
            {
                mensaje = $"Error: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error de conexión: {ex.Message}";
        }
    }

    private async Task MostrarMensaje(string texto, int segundos = 3)
    {
        mensaje = texto;
        StateHasChanged();
        await Task.Delay(segundos * 1000);
        mensaje = null;
        StateHasChanged();
    }
}
