@page "/calificaciones"
@inject HttpClient Http
@using System.Net.Http.Json
@using NotaAsistencia.Client.Dtos
@using NotaAsistencia.Client.Models
@inject IJSRuntime JS
@using System.Text.Json



<h3 class="text-center text-primary">Registro de Calificaciones</h3>


<div class="card shadow p-4 bg-light mb-4">
    <select class="form-select" @onchange="CargarDetalleMateria">
        <option disabled selected>-- Seleccione una materia --</option>
        @foreach (var m in materias)
        {
            <option value="@m.MateriaId">@m.Nombre</option>
        }
    </select>

@if (!string.IsNullOrEmpty(docenteAsignado))
{
    <p><strong>Docente:</strong> @docenteAsignado</p>
}

    @if (calificacionGrupal.Calificaciones.Any())
    {
        <EditForm Model="calificacionGrupal" OnValidSubmit="GuardarCalificaciones">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Estudiante</th>
                        <th>Nota</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var nota in calificacionGrupal.Calificaciones)
                    {
                        <tr>
                            <td>@estudiantes.FirstOrDefault(e => e.EstudianteId == nota.EstudianteId)?.NombreCompleto</td>
                            <td>
                                <InputNumber @bind-Value="nota.Nota" class="form-control" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <button class="btn btn-success" type="submit">Guardar Todas</button>
        </EditForm>
    }
    else if (materiaSeleccionadaId > 0)
    {
        <p class="text-danger mt-3">No hay estudiantes asignados a esta materia.</p>
    }

</div>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-info">@mensaje</div>
}
@code {
    private List<MateriaDtos> materias = new();
    private string docenteAsignado = "";
    private List<EstudianteDtos> estudiantes = new();
    private CalificacionGrupalDto calificacionGrupal = new();
    private int materiaSeleccionadaId;
    private string mensaje;
    private int docenteIdSeleccionado;


    protected override async Task OnInitializedAsync()
    {
        materias = await Http.GetFromJsonAsync<List<MateriaDtos>>("api/Materias/estado?estado=Activas");
    }

    private async Task CargarDetalleMateria(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int id))
        {
            materiaSeleccionadaId = id;

            var resultado = await Http.GetFromJsonAsync<MateriaDetalleDto>($"api/Materias/{materiaSeleccionadaId}/detalles");

            docenteAsignado = resultado.Docente;
            docenteIdSeleccionado = resultado.DocenteId;
            estudiantes = resultado.Estudiantes;

            calificacionGrupal = new CalificacionGrupalDto
                {
                    MateriaId = materiaSeleccionadaId,
                    DocenteId = docenteIdSeleccionado,
                    Calificaciones = estudiantes.Select(e => new EstudianteNotaDto
                    {
                        EstudianteId = e.EstudianteId,
                        Nota = 0
                    }).ToList()
                };
        }
    }

    private async Task GuardarCalificaciones()
    {
        // Serializa el objeto y lo muestra en consola
        var json = JsonSerializer.Serialize(calificacionGrupal);
        await JS.InvokeVoidAsync("console.log", "Enviando datos:", json);

        // Envía al backend
        var response = await Http.PostAsJsonAsync("api/Calificaciones/grupal", calificacionGrupal);

        if (response.IsSuccessStatusCode)
        {
            mensaje = "Calificaciones guardadas correctamente.";
        }
        else
        {
            var contenido = await response.Content.ReadAsStringAsync();
            mensaje = $"Error al guardar: {contenido}";
        }
    }



}
