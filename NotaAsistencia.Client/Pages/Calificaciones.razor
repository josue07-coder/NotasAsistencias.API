@page "/calificaciones"
@inject HttpClient Http
@using System.Net.Http.Json
@using NotaAsistencia.Client.Dtos
@using NotaAsistencia.Client.Models

<h3 class="text-center text-primary">Registro de Calificaciones</h3>


<div class="card shadow p-4 bg-light mb-4">
    <EditForm Model="nuevaCalificacion" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Estudiante</label>
            <select class="form-select" @bind="nuevaCalificacion.EstudianteId">
                <option value="">-- Seleccione un estudiante --</option>
                @foreach (var est in estudiantes)
                {
                    <option value="@est.EstudianteId">@est.NombreCompleto</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label class="form-label">Materia</label>
            <select class="form-select" @bind="nuevaCalificacion.Materia">
                <option value="">-- Seleccione una materia --</option>
                <option>Lengua española</option>
                <option>Matemáticas</option>
                <option>Ciencias sociales</option>
                <option>Ciencias naturales</option>
            </select>
        </div>

        <div class="mb-3">
            <label class="form-label">Nota</label>
            <InputNumber class="form-control" @bind-Value="nuevaCalificacion.Nota" />
        </div>

        <button class="btn btn-success w-100" type="submit">Guardar Calificación</button>
    </EditForm>
</div>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-info">@mensaje</div>
}
@code {
    private CalificacionCreateDto nuevaCalificacion = new();
    private List<EstudianteModel> estudiantes = new();
    private string? mensaje;

    protected override async Task OnInitializedAsync()
    {
        estudiantes = await Http.GetFromJsonAsync<List<EstudianteModel>>("api/Estudiantes/estado?activo=true");
    }

    private async Task Guardar()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Calificaciones", nuevaCalificacion);

            if (response.IsSuccessStatusCode)
            {
                mensaje = "Calificación registrada correctamente.";
                nuevaCalificacion = new(); // limpiar
            }
            else
            {
                var contenido = await response.Content.ReadAsStringAsync();

                try
                {
                    var errorObj = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(contenido);
                    mensaje = errorObj != null && errorObj.ContainsKey("mensaje")
                        ? $"Error: {errorObj["mensaje"]}"
                        : "Error desconocido al registrar la calificación.";
                }
                catch
                {
                    mensaje = $"Error inesperado: {contenido}";
                }
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error de conexión: {ex.Message}";
        }
    }

}
